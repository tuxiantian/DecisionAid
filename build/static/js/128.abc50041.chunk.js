"use strict";(self.webpackChunkdecision_app=self.webpackChunkdecision_app||[]).push([[128],{1516:(e,n,t)=>{t.d(n,{M:()=>d});var r=t(6772),i=t(3314),o=t(8293);t(9330);function d(e){var n={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:a(e),edges:s(e)};return r.A(e.graph())||(n.value=i.A(e.graph())),n}function a(e){return o.A(e.nodes(),(function(n){var t=e.node(n),i=e.parent(n),o={v:n};return r.A(t)||(o.value=t),r.A(i)||(o.parent=i),o}))}function s(e){return o.A(e.edges(),(function(n){var t=e.edge(n),i={v:n.v,w:n.w};return r.A(n.name)||(i.name=n.name),r.A(t)||(i.value=t),i}))}},3314:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(1387);const i=function(e){return(0,r.A)(e,4)}},2128:(e,n,t)=>{t.r(n),t.d(n,{render:()=>x});var r=t(9379),i=t(7179),o=(t(3721),t(7791)),d=(t(7357),t(7039),t(1020)),a=t(62),s=t(1516),c=t(772),l=new Map,g=new Map,u=new Map,f=(0,d.K2)((()=>{g.clear(),u.clear(),l.clear()}),"clear"),h=(0,d.K2)(((e,n)=>{const t=g.get(n)||[];return d.Rm.trace("In isDescendant",n," ",e," = ",t.includes(e)),t.includes(e)}),"isDescendant"),p=(0,d.K2)(((e,n)=>{const t=g.get(n)||[];return d.Rm.info("Descendants of ",n," is ",t),d.Rm.info("Edge is ",e),e.v!==n&&e.w!==n&&(t?t.includes(e.v)||h(e.v,n)||h(e.w,n)||t.includes(e.w):(d.Rm.debug("Tilt, ",n,",not in descendants"),!1))}),"edgeInCluster"),m=(0,d.K2)(((e,n,t,r)=>{d.Rm.warn("Copying children of ",e,"root",r,"data",n.node(e),r);const i=n.children(e)||[];e!==r&&i.push(e),d.Rm.warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach((i=>{if(n.children(i).length>0)m(i,n,t,r);else{const o=n.node(i);d.Rm.info("cp ",i," to ",r," with parent ",e),t.setNode(i,o),r!==n.parent(i)&&(d.Rm.warn("Setting parent",i,n.parent(i)),t.setParent(i,n.parent(i))),e!==r&&i!==e?(d.Rm.debug("Setting parent",i,e),t.setParent(i,e)):(d.Rm.info("In copy ",e,"root",r,"data",n.node(e),r),d.Rm.debug("Not Setting parent for node=",i,"cluster!==rootId",e!==r,"node!==clusterId",i!==e));const a=n.edges(i);d.Rm.debug("Copying Edges",a),a.forEach((i=>{d.Rm.info("Edge",i);const o=n.edge(i.v,i.w,i.name);d.Rm.info("Edge data",o,r);try{p(i,r)?(d.Rm.info("Copying as ",i.v,i.w,o,i.name),t.setEdge(i.v,i.w,o,i.name),d.Rm.info("newGraph edges ",t.edges(),t.edge(t.edges()[0]))):d.Rm.info("Skipping copy of edge ",i.v,"--\x3e",i.w," rootId: ",r," clusterId:",e)}catch(a){d.Rm.error(a)}}))}d.Rm.debug("Removing node",i),n.removeNode(i)}))}),"copy"),w=(0,d.K2)(((e,n)=>{const t=n.children(e);let r=[...t];for(const i of t)u.set(i,e),r=[...r,...w(i,n)];return r}),"extractDescendants"),v=(0,d.K2)(((e,n,t)=>{const r=e.edges().filter((e=>e.v===n||e.w===n)),i=e.edges().filter((e=>e.v===t||e.w===t)),o=r.map((e=>({v:e.v===n?t:e.v,w:e.w===n?n:e.w}))),d=i.map((e=>({v:e.v,w:e.w})));return o.filter((e=>d.some((n=>e.v===n.v&&e.w===n.w))))}),"findCommonEdges"),R=(0,d.K2)(((e,n,t)=>{const r=n.children(e);if(d.Rm.trace("Searching children of id ",e,r),r.length<1)return e;let i;for(const o of r){const e=R(o,n,t),r=v(n,t,e);if(e){if(!(r.length>0))return e;i=e}}return i}),"findNonClusterChild"),y=(0,d.K2)((e=>l.has(e)&&l.get(e).externalConnections&&l.has(e)?l.get(e).id:e),"getAnchorId"),X=(0,d.K2)(((e,n)=>{if(!e||n>10)d.Rm.debug("Opting out, no graph ");else{d.Rm.debug("Opting in, graph "),e.nodes().forEach((function(n){e.children(n).length>0&&(d.Rm.warn("Cluster identified",n," Replacement id in edges: ",R(n,e,n)),g.set(n,w(n,e)),l.set(n,{id:R(n,e,n),clusterData:e.node(n)}))})),e.nodes().forEach((function(n){const t=e.children(n),r=e.edges();t.length>0?(d.Rm.debug("Cluster identified",n,g),r.forEach((e=>{h(e.v,n)^h(e.w,n)&&(d.Rm.warn("Edge: ",e," leaves cluster ",n),d.Rm.warn("Descendants of XXX ",n,": ",g.get(n)),l.get(n).externalConnections=!0)}))):d.Rm.debug("Not a cluster ",n,g)}));for(let n of l.keys()){const t=l.get(n).id,r=e.parent(t);r!==n&&l.has(r)&&!l.get(r).externalConnections&&(l.get(n).id=r)}e.edges().forEach((function(n){const t=e.edge(n);d.Rm.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(n)),d.Rm.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(e.edge(n)));let r=n.v,i=n.w;if(d.Rm.warn("Fix XXX",l,"ids:",n.v,n.w,"Translating: ",l.get(n.v)," --- ",l.get(n.w)),l.get(n.v)||l.get(n.w)){if(d.Rm.warn("Fixing and trying - removing XXX",n.v,n.w,n.name),r=y(n.v),i=y(n.w),e.removeEdge(n.v,n.w,n.name),r!==n.v){const i=e.parent(r);l.get(i).externalConnections=!0,t.fromCluster=n.v}if(i!==n.w){const r=e.parent(i);l.get(r).externalConnections=!0,t.toCluster=n.w}d.Rm.warn("Fix Replacing with XXX",r,i,n.name),e.setEdge(r,i,t,n.name)}})),d.Rm.warn("Adjusted Graph",s.M(e)),b(e,0),d.Rm.trace(l)}}),"adjustClustersAndEdges"),b=(0,d.K2)(((e,n)=>{if(d.Rm.warn("extractor - ",n,s.M(e),e.children("D")),n>10)return void d.Rm.error("Bailing out");let t=e.nodes(),r=!1;for(const o of t){const n=e.children(o);r=r||n.length>0}if(r){d.Rm.debug("Nodes = ",t,n);for(const r of t)if(d.Rm.debug("Extracting node",r,l,l.has(r)&&!l.get(r).externalConnections,!e.parent(r),e.node(r),e.children("D")," Depth ",n),l.has(r))if(!l.get(r).externalConnections&&e.children(r)&&e.children(r).length>0){var i;d.Rm.warn("Cluster without external connections, without a parent and with children",r,n);let t="TB"===e.graph().rankdir?"LR":"TB";null!==(i=l.get(r))&&void 0!==i&&null!==(i=i.clusterData)&&void 0!==i&&i.dir&&(t=l.get(r).clusterData.dir,d.Rm.warn("Fixing dir",l.get(r).clusterData.dir,t));const o=new c.T({multigraph:!0,compound:!0}).setGraph({rankdir:t,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));d.Rm.warn("Old graph before copy",s.M(e)),m(r,e,o,r),e.setNode(r,{clusterNode:!0,id:r,clusterData:l.get(r).clusterData,label:l.get(r).label,graph:o}),d.Rm.warn("New graph after copy node: (",r,")",s.M(o)),d.Rm.debug("Old graph after copy",s.M(e))}else d.Rm.warn("Cluster ** ",r," **not meeting the criteria !externalConnections:",!l.get(r).externalConnections," no parent: ",!e.parent(r)," children ",e.children(r)&&e.children(r).length>0,e.children("D"),n),d.Rm.debug(l);else d.Rm.debug("Not a cluster",r,n);t=e.nodes(),d.Rm.warn("New list of nodes",t);for(const r of t){const t=e.node(r);d.Rm.warn(" Now next level",r,t),null!==t&&void 0!==t&&t.clusterNode&&b(t.graph,n+1)}}else d.Rm.debug("Done, no node has children",e.nodes())}),"extractor"),E=(0,d.K2)(((e,n)=>{if(0===n.length)return[];let t=Object.assign([],n);return n.forEach((n=>{const r=e.children(n),i=E(e,r);t=[...t,...i]})),t}),"sorter"),N=(0,d.K2)((e=>E(e,e.children())),"sortNodesByHierarchy"),C=(0,d.K2)((async(e,n,t,c,g,u)=>{d.Rm.warn("Graph in recursive render:XAX",s.M(n),g);const f=n.graph().rankdir;d.Rm.trace("Dir in recursive render - dir:",f);const h=e.insert("g").attr("class","root");n.nodes()?d.Rm.info("Recursive render XXX",n.nodes()):d.Rm.info("No nodes found for",n),n.edges().length>0&&d.Rm.info("Recursive edges",n.edge(n.edges()[0]));const p=h.insert("g").attr("class","clusters"),m=h.insert("g").attr("class","edgePaths"),w=h.insert("g").attr("class","edgeLabels"),v=h.insert("g").attr("class","nodes");await Promise.all(n.nodes().map((async function(e){const o=n.node(e);if(void 0!==g){const t=JSON.parse(JSON.stringify(g.clusterData));d.Rm.trace("Setting data for parent cluster XXX\n Node.id = ",e,"\n data=",t.height,"\nParent cluster",g.height),n.setNode(g.id,t),n.parent(e)||(d.Rm.trace("Setting parent",e,g.id),n.setParent(e,g.id,t))}if(d.Rm.info("(Insert) Node XXX"+e+": "+JSON.stringify(n.node(e))),null!==o&&void 0!==o&&o.clusterNode){d.Rm.info("Cluster identified XBX",e,o.width,n.node(e));const{ranksep:a,nodesep:s}=n.graph();o.graph.setGraph((0,r.A)((0,r.A)({},o.graph.graph()),{},{ranksep:a+25,nodesep:s}));const l=await C(v,o.graph,t,c,n.node(e),u),g=l.elem;(0,i.lC)(o,g),o.diff=l.diff||0,d.Rm.info("New compound node after recursive render XAX",e,"width",o.width,"height",o.height),(0,i.U7)(g,o)}else n.children(e).length>0?(d.Rm.trace("Cluster - the non recursive path XBX",e,o.id,o,o.width,"Graph:",n),d.Rm.trace(R(o.id,n)),l.set(o.id,{id:R(o.id,n),node:o})):(d.Rm.trace("Node - the non recursive path XAX",e,v,n.node(e),f),await(0,i.on)(v,n.node(e),{config:u,dir:f}))})));const y=(0,d.K2)((async()=>{const e=n.edges().map((async function(e){const t=n.edge(e.v,e.w,e.name);d.Rm.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),d.Rm.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(n.edge(e))),d.Rm.info("Fix",l,"ids:",e.v,e.w,"Translating: ",l.get(e.v),l.get(e.w)),await(0,i.jP)(w,t)}));await Promise.all(e)}),"processEdges");await y(),d.Rm.info("Graph before layout:",JSON.stringify(s.M(n))),d.Rm.info("############################################# XXX"),d.Rm.info("###                Layout                 ### XXX"),d.Rm.info("############################################# XXX"),(0,a.Zp)(n),d.Rm.info("Graph after layout:",JSON.stringify(s.M(n)));let X=0,{subGraphTitleTotalMargin:b}=(0,o.O)(u);return await Promise.all(N(n).map((async function(e){const t=n.node(e);if(d.Rm.info("Position XBX => "+e+": ("+t.x,","+t.y,") width: ",t.width," height: ",t.height),null!==t&&void 0!==t&&t.clusterNode)t.y+=b,d.Rm.info("A tainted cluster node XBX1",e,t.id,t.width,t.height,t.x,t.y,n.parent(e)),l.get(t.id).node=t,(0,i.U_)(t);else if(n.children(e).length>0){var r;d.Rm.info("A pure cluster node XBX1",e,t.id,t.x,t.y,t.width,t.height,n.parent(e)),t.height+=b,n.node(t.parentId);const o=(null===t||void 0===t?void 0:t.padding)/2||0,a=(null===t||void 0===t||null===(r=t.labelBBox)||void 0===r?void 0:r.height)||0,s=a-o||0;d.Rm.debug("OffsetY",s,"labelHeight",a,"halfPadding",o),await(0,i.U)(p,t),l.get(t.id).node=t}else{const e=n.node(t.parentId);t.y+=b/2,d.Rm.info("A regular node XBX1 - using the padding",t.id,"parent",t.parentId,t.width,t.height,t.x,t.y,"offsetY",t.offsetY,"parent",e,null===e||void 0===e?void 0:e.offsetY,t),(0,i.U_)(t)}}))),n.edges().forEach((function(e){const r=n.edge(e);d.Rm.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(r),r),r.points.forEach((e=>e.y+=b/2));const o=n.node(e.v);var a=n.node(e.w);const s=(0,i.Jo)(m,r,l,t,o,a,c);(0,i.T_)(r,s)})),n.nodes().forEach((function(e){const t=n.node(e);d.Rm.info(e,t.type,t.diff),t.isGroup&&(X=t.diff)})),d.Rm.warn("Returning from recursive render XAX",h,X),{elem:h,diff:X}}),"recursiveRender"),x=(0,d.K2)((async(e,n)=>{var t,o,a,l;const g=new c.T({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:(null===(t=e.config)||void 0===t?void 0:t.nodeSpacing)||(null===(o=e.config)||void 0===o||null===(o=o.flowchart)||void 0===o?void 0:o.nodeSpacing)||e.nodeSpacing,ranksep:(null===(a=e.config)||void 0===a?void 0:a.rankSpacing)||(null===(l=e.config)||void 0===l||null===(l=l.flowchart)||void 0===l?void 0:l.rankSpacing)||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}})),u=n.select("g");(0,i.g0)(u,e.markers,e.type,e.diagramId),(0,i.nA)(),(0,i.gh)(),(0,i.IU)(),f(),e.nodes.forEach((e=>{g.setNode(e.id,(0,r.A)({},e)),e.parentId&&g.setParent(e.id,e.parentId)})),d.Rm.debug("Edges:",e.edges),e.edges.forEach((e=>{if(e.start===e.end){const n=e.start,t=n+"---"+n+"---1",r=n+"---"+n+"---2",i=g.node(n);g.setNode(t,{domId:t,id:t,parentId:i.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),g.setParent(t,i.parentId),g.setNode(r,{domId:r,id:r,parentId:i.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),g.setParent(r,i.parentId);const o=structuredClone(e),d=structuredClone(e),a=structuredClone(e);o.label="",o.arrowTypeEnd="none",o.id=n+"-cyclic-special-1",d.arrowTypeEnd="none",d.id=n+"-cyclic-special-mid",a.label="",i.isGroup&&(o.fromCluster=n,a.toCluster=n),a.id=n+"-cyclic-special-2",g.setEdge(n,t,o,n+"-cyclic-special-0"),g.setEdge(t,r,d,n+"-cyclic-special-1"),g.setEdge(r,n,a,n+"-cyc<lic-special-2")}else g.setEdge(e.start,e.end,(0,r.A)({},e),e.id)})),d.Rm.warn("Graph at first:",JSON.stringify(s.M(g))),X(g),d.Rm.warn("Graph after XAX:",JSON.stringify(s.M(g)));const h=(0,d.D7)();await C(u,g,e.type,e.diagramId,void 0,h)}),"render")}}]);
//# sourceMappingURL=128.abc50041.chunk.js.map